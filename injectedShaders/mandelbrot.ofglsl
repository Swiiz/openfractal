const vec4 colorPalette = -vec4(0,23,21,0); // Can be randomly generated for more fun!
const vec4 finalColor = vec4(.0); // Color applied to bounded values
const int hueModulus = 30;

void main() {
    float zoom = .2; // Default zoom
    int recursion = 500, // Default recursion
    i = 0;
    vec2 c = (of_mapToComplex(of_dimensions, gl_FragCoord.xy, of_position)) / of_zoom, // Mapping the complex plane to the viewport
    z = c;
    for(; i <= recursion && cpx_mag(z) <= 2. ; i++ ) z = cpx_pow(z, 2) + c; // Actual iterative thing
    fragColor =  i - 1 == recursion ? finalColor : .6 + .6 * cos( 6.3 *  (float((i - 1) % hueModulus) / float(hueModulus)) + colorPalette); // Deciding the final color
}